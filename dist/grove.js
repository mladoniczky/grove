(()=>{"use strict";const t=function(){function t(e,r,n){if(void 0===n&&(n=!1),this._key=e,this._parent=r,this._children={},this._isEnd=!1,!(n||e&&"string"==typeof e))throw new Error("Parent key cannot be null, empty or not type of string!");if(!(n||r&&r instanceof t))throw new Error("Parent node cannot be null, empty or not class of TrieNode")}return Object.defineProperty(t.prototype,"parent",{get:function(){return this._parent},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"children",{get:function(){return this._children},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"data",{get:function(){return this._data},set:function(t){this._isEnd=!!t,this._data=t,this._isEnd||(this._word=void 0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"word",{get:function(){return this._word},set:function(t){this._word=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isEnd",{get:function(){return this._isEnd},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this._key},enumerable:!1,configurable:!0}),t.prototype.unlink=function(){this._parent=void 0,this._key=void 0},t.prototype.link=function(t,e){this._key=t,this._parent=e},t.prototype.hasChildren=function(){return Object.keys(this._children).length>0},t.prototype.deleteChild=function(t){this._children[t]&&(this._children[t].data=void 0,this._children[t].unlink(),delete this._children[t])},t.prototype.addChild=function(t,e){if(t&&e){var r=this._children[t];return this._children[t]=e,r}},t.prototype.hasChild=function(t){return!!this._children[t]},t}();!function(){function e(){this._root=new t("",null,!0),this._lastIndex=1}Object.defineProperty(e.prototype,"root",{get:function(){return this._root},enumerable:!1,configurable:!0}),e.prototype.insert=function(t,e){return this._insertWord(t,e,this._root,0)},e.prototype._insertWord=function(e,r,n,o){if(o===e.length)return n.word=e,n.data=r,!0;var i=e.charAt(o);return n.hasChild(i)||n.addChild(i,new t(i,n)),this._insertWord(e,r,n.children[i],o+1)},e.prototype.search=function(t){var e=this._searchNode(t,this._root,0);return e?e.data:void 0},e.prototype._searchNode=function(t,e,r){if(r===t.length)return e.isEnd?e:void 0;var n=t.charAt(r);return e.hasChild(n)?this._searchNode(t,e.children[n],r+1):void 0},e.prototype.delete=function(t){var e=this._searchNode(t,this._root,0);return!!e&&(e.hasChildren()?(e.data=void 0,!0):(this._deleteWord(e),!0))},e.prototype._deleteWord=function(t){if(t!==this._root){var e=t.parent;e.deleteChild(t.key),e.hasChildren()||this._deleteWord(e)}},e.prototype.update=function(t,e){var r=this._searchNode(t,this._root,0);if(!r)return!1;var n=r.data;return r.data=e,n},e.prototype.getDataNode=function(t){return this._searchNode(t,this._root,0)},e.prototype.getPath=function(t){var e=[];e.push(this._root);for(var r=1;r<=t.length;r++)e.push(this._searchNode(t.substring(0,r),this._root,0));return e}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,